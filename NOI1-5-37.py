'''
描述
雇佣兵的体力最大值为M，初始体力值为0、战斗力为N、拥有X个能量元素。
当雇佣兵的体力值恰好为M时，才可以参加一个为期M天的战斗期，战斗期结束体力值将为0。在同一个战斗期内，雇佣兵每连续战斗n天，战斗力就会上升1点，n为当前战斗期开始时的战斗力。
一个战斗期结束后，雇佣兵需要用若干个能量元素使其体力恢复到最大值M，从而参加下一个战斗期。每个能量元素恢复的体力值不超过当前的战斗力。每个能量元素只能使用一次。
请问：雇佣兵的战斗力最大可以到达多少。

输入
一行包括三个整数M、N、X，相邻两个整数之间用单个空格隔开。M、N、X均为不超过10000的正整数。
输出
输出一个整数，为雇佣兵的最大战斗力。
样例输入
5 2 10
样例输出
6
'''

import math
M,N,X=map(int,input().split())
if M<N:
    print(N)
else:
    while X>0 and M>=N: #如果有能量元素，且体力最大值M比N大，足够连续N天战斗才进行程序
        if X<math.ceil(M/N): #如果不判断X是否足够补充战斗力就会出错，首先要保证X足够补充战斗力
            break
        else:
            X-=math.ceil(M/N) #使用math.ceil()向上取整，只要有余数，就需要多使用一个能量元素
            N+=M//N #每N天增加1个战斗力，如果不足N天，M//N就是0，说明战斗力一直没有增加，在每一个循环（战斗期）结束时，当前N能达到的最大值就是N+M//N
    print(N)
